buildscript {
    ext {
        springBootVersion = '3.4.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    repositories {
        mavenCentral()
    }

    configurations {
        testArtifacts
        developmentOnly
        runtimeClasspath {
            extendsFrom developmentOnly
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
        }
    }

    dependencies {
        compileOnly('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')
        testCompileOnly('org.projectlombok:lombok')
        testAnnotationProcessor('org.projectlombok:lombok')
        implementation('org.mapstruct:mapstruct:1.6.3')
        annotationProcessor('org.mapstruct:mapstruct-processor:1.6.3')
        annotationProcessor('org.projectlombok:lombok-mapstruct-binding:0.2.0')
        developmentOnly('org.springframework.boot:spring-boot-devtools')
        developmentOnly('org.springframework.boot:spring-boot-docker-compose')
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        testImplementation('io.rest-assured:rest-assured')
        testImplementation('org.springframework.boot:spring-boot-testcontainers')
        testImplementation('org.testcontainers:postgresql')
    }

    sourceCompatibility = '21'

    ext {
        projectName = "$rootProjectName-$project.name"
    }

    springBoot {
        mainClass = 'uit.carbon_shop.base.CarbonShopApplication'
    }

    bootRun {
        enabled false
    }

    bootBuildImage {
        enabled false
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        from sourceSets.test.output
        archiveClassifier.set('tests')
    }

    artifacts {
        testArtifacts testJar
    }
}

project(':carbon-shop-web') {
    bootRun {
        environment SPRING_PROFILES_ACTIVE: environment.SPRING_PROFILES_ACTIVE ?: 'local'
        workingDir rootProject.projectDir
        enabled true
    }

    bootBuildImage {
        enabled true
    }

    dependencies {
        api project(':carbon-shop-base')

        testImplementation project(path: ':carbon-shop-base', configuration: 'testArtifacts')
    }
}

project(':carbon-shop-base') {
    dependencies {
        api('org.springframework.boot:spring-boot-starter-web')
        api('org.springframework.boot:spring-boot-starter-validation')
        api('org.springframework.boot:spring-boot-starter-security')
        api('com.auth0:java-jwt:4.4.0')
        api('org.springframework.boot:spring-boot-starter-data-jpa')
        runtimeOnly('org.postgresql:postgresql')
        api('org.springframework.boot:spring-boot-starter-actuator')
        api('io.github.wimdeblauwe:error-handling-spring-boot-starter:4.5.0')
        api('org.springframework.boot:spring-boot-starter-thymeleaf')
        api('org.springframework.boot:spring-boot-starter-mail')
        api('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0')
        api('org.springframework.boot:spring-boot-starter-data-redis')
    }
}
